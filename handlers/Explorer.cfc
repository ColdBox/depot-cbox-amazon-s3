component extends="coldbox.system.EventHandler"{	// Messaging	property name="messagebox" 	inject="messageBox@cbMessagebox";	// File Utils	property name="fileUtils"	inject="coldbox.system.core.util.FileUtils";	// S3 SDK	property name="s3" 			inject="AmazonS3@s3sdk";	// SDK Settings	property name="settings"	inject="coldbox:setting:s3sdk";		// Handler Properties	this.preHandler_except = "authenticate";	/**	* Executes before all handler actions	*/	any function preHandler( event, rc, prc, action, eventArguments ){		// module root		prc.root = event.getModuleRoot();	}	/**	* authenticate	*/	function authenticate( event, rc, prc ){		if( event.valueExists('authButton') ){			// Save credentials			setSetting("s3_accessKey",rc.accessKey);			setSetting("s3_secretKey",rc.secretKey);			s3.setAuth(rc.accessKey,rc.secretKey);			// relocate			setNextEvent('s3explorer/explorer');		}				event.setView("explorer/authenticate");	}	/**	* index	*/	function index( event, rc, prc ){		prc.allBuckets = s3.listBuckets();		event.setView( "explorer/index" );	}	/**	* createBucket	*/	function createBucket( event, rc, prc ){		s3.putBucket( rc.bucketName, rc.acl, rc.storage );		messagebox.info( message="bucket created" );		setNextEvent( "s3explorer" );	}		/**	* removeBucket	*/	function removeBucket( event, rc, prc ){		if( s3.deleteBucket( rc.bucketName ) ){			messagebox.info( message="Bucket Removed!" );		} else {			messagebox.error( message="S3 service could not remove bucket. Please refer to debugging information." );		}		setNextEvent( "s3explorer" );	}			/**	* viewBucket	*/	function viewBucket( event, rc, prc ){		event.paramValue( "delimiter", "/" )			.paramValue( "folderName", "" );		// do we have a folder to display?		if( len( rc.folderName ) > 0 ){			rc.foldername = replacenocase( rc.foldername, "|", "/", "all" ) & '/';		}			prc.allObjects = s3.getBucket(			bucketName 	= replace( rc.bucketName, "|", "/", "all" ), 			delimiter 	= "#rc.delimiter#", 			prefix 		= "#rc.folderName#"		);  				prc.allBuckets = s3.listBuckets();	}	/**	* genAuthenticatedURL	*/	function genAuthenticatedURL( event, rc, prc ){		rc.timedLink = s3.getAuthenticatedURL( bucketName=rc.bucketname, uri=rc.key, virtualHostStyle=true );		event.renderData( data=renderView("explorer/genAuthenticatedURL") );	}		/**	* getObjectInfo	*/	function getObjectInfo( event, rc, prc ){		rc.info = s3.getObjectInfo( rc.bucketname, rc.objectKey );		event.renderData( data=renderView( "explorer/objectInfo" ) );	}		/**	* upload	*/	function upload( event, rc, prc ){		var tempDir 	= settings.tempUploadDirectory;		var fileInfo 	= fileUtils.uploadFile(			fileField 		= "fileobject",			destination 	= tempDir,		 	mode 			= "666",		 	NameConflict 	= "overwrite"		 );		var returnFolderPath = "";		if ( listLen( rc.foldername ) ){			returnFolderPath = replacenocase( reverse( replacenocase( reverse( rc.foldername ), "/", "", "one" ) ), "/", "|", "all" );		}		// Inflate json metadata		if( NOT len( event.getTrimValue( "extraMetadata" ) ) ){ 			rc.extrametadata = "{}"; 		}		rc.extrametadata = deserializeJSON( rc.extrametadata );				try{			rc.results = s3.putObjectFile(				bucketName 		= rc.bucketName,				filePath 		= fileInfo.serverDirectory & "/" & fileInfo.serverFile,				uri 			= rc.foldername & getFileFromPath( fileInfo.serverDirectory & "/" & fileInfo.serverFile ),				contentType 	= fileInfo.contentType,				cacheControl 	= event.getTrimValue( "cc" ),				expires 		= event.getTrimValue( "expires" ),				acl 			= rc.acl,				metaHeaders 	= rc.extrametadata			);			messagebox.info( message="Uploaded file with etag: #rc.results#");		} catch( Any e ) {			messagebox.error( message="Error uploading file: #e.message# #e.detail#");			log.error("Error putting file to S3",e);		} finally {			// remove file			fileDelete( "#tempDir#/#fileInfo.serverFile#" );		}				// relocate		setNextEvent( "s3explorer/bucket/#urlEncodedFormat( rc.bucketName )#/#urlEncodedFormat( returnFolderPath )#" );	}		/**	* createFolder	*/	function createFolder( event, rc, prc ){		try{			rc.results = s3.putObjectFolder(				bucketName 	= rc.bucketName,				uri  		= urlEncodedformat( rc.foldername & "_$folder$" ),				acl 		= rc.acl			);										  			messagebox.info( message="Uploaded Folder with etag: #rc.results#");		} catch(Any e) {			messagebox.error( message="Error uploading Folder: #e.message# #e.detail#" );			log.error( "Error putting file to S3", e );		}    				// relocate		setNextEvent( "s3explorer/bucket/#urlEncodedFormat( rc.bucketName )#/#urlEncodedFormat( replacenocase( rc.foldername, '/', '|', 'all' ) )#" );	}     	/** 	* removeObject 	*/ 	function removeObject( event, rc, prc ){		var returnFolderPath = "";		if ( listLen( rc.uri ) ){			returnFolderPath = listrest( reverse( urlDecode( rc.uri ) ), "/" );			returnFolderPath = reverse( replacenocase( returnFolderPath, "/", "|", "all") );		}		if( s3.deleteObject( rc.bucketName, rc.uri ) ){			messagebox.info( "#encodeForHTML( rc.uri )# Removed!" );		} else {			messagebox.error( "S3 service could not remove object. Please refer to debugging information." );		}		setNextEvent( event="s3explorer/bucket/#urlEncodedFormat( rc.bucketName )#/#urlEncodedFormat( returnFolderPath )#" ); 	} 	/** 	* copyDialog 	*/ 	function copyDialog( event, rc, prc ){ 		rc.allBuckets = s3.listBuckets();		event.renderData( data = renderView( "explorer/copyDialog" ) ); 	}		/**	* copyObject	*/	function copyObject( event, rc, prc ){		// Inflate json metadata		if( len( event.getTrimValue( "extraMetadata" ) ) ){ 			rc.extrametadata = "{}"; 		}		rc.extrametadata = deserializeJSON( rc.extrametadata );				// Copy		rc.results = s3.copyObject(			fromBucket 		= rc.fromBucket,			fromURI 		= rc.fromURI,			toBucket 		= rc.toBucket,			toURI 			= rc.toURI,			acl 			= rc.acl,			copymetaData 	= rc.copyMetadata,			metaHeaders 	= rc.extrametadata		);				messagebox.info( "Object copied successfully" );				// relocate		setNextEvent( event="s3explorer/bucket/#urlEncodedFormat( rc.fromBucket )#" );	}		/**	* objectACL	*/	function objectACL( event, rc, prc ){		rc.grants = s3.getAcessControlPolicy( rc.objectName );    			event.renderData( data=renderView( 'explorer/objectACL' ) );	}}